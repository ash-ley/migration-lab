name: Terraform Deployment
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
    branches:
      - 'main'
env:
  AWS_REGION : "eu-west-1"
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
jobs:
  onprem-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/feat/**'
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ACTIONS_ROLE }}
          role-session-name: OIDCsession
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform -chdir=onprem/ init

      - name: Terraform fmt
        id: fmt
        run: terraform -chdir=onprem/ fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=onprem/ validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform -chdir=onprem/ plan -no-color

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \` onprem/ \`, Workflow: \`${{ github.workflow }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint
        with:
          tflint_version: latest

      - name: Show version
        run: tflint --version

      - name: Init TFLint
        run: tflint -chdir=onprem/ --init
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        run: tflint -chdir=onprem/ -f compact

  migration-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/feat/**'
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ACTIONS_ROLE }}
          role-session-name: OIDCsession
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform -chdir=migration/ init

      - name: Terraform fmt
        id: fmt
        run: terraform -chdir=migration/ fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=migration/ validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform -chdir=migration/ plan -no-color

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \` migration/ \`, Workflow: \`${{ github.workflow }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint
        with:
          tflint_version: latest
  
      - name: Show version
        run: tflint --version
  
      - name: Init TFLint
        run: tflint -chdir=migration/ --init
        env:
          GITHUB_TOKEN: ${{ github.token }}
  
      - name: Run TFLint
        run: tflint -chdir=migration/ -f compact

  onprem-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ACTIONS_ROLE }}
          role-session-name: OIDCsession
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform -chdir=onprem/ init

      - name: Terraform fmt
        id: fmt
        run: terraform -chdir=onprem/ fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=onprem/ validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform -chdir=onprem/ plan -no-color

      - name: Terraform Apply
        id: apply
        run: terraform -chdir=onprem/ apply --auto-approve

  migration-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ACTIONS_ROLE }}
          role-session-name: OIDCsession
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform -chdir=migration/ init

      - name: Terraform fmt
        id: fmt
        run: terraform -chdir=migration/ fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=migration/ validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform -chdir=migration/ plan -no-color

      - name: Terraform Apply
        id: apply
        run: terraform -chdir=migration/ apply --auto-approve